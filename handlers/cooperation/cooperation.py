from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext

from database.crud import CrudCooperation
from keyboards.inline_keyboards import cancel_cooperation, start_kb
from keyboards.keyboard_creator import make_row_inline_keyboards
from states.states import CooperationStates

router = Router()


@router.callback_query(F.data == 'cooperation_company')
async def start_cooperation_application(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()

    await callback_query.message.answer(
        "üì© –û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ.\n"
        "–ú—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=make_row_inline_keyboards(cancel_cooperation)
    )

    await state.set_state(CooperationStates.text_requests)


@router.message(CooperationStates.text_requests, F.text)
async def receive_cooperation_text(message: types.Message, state: FSMContext):
    get_text = message.text
    create_requests = await CrudCooperation().create_request(
        message.from_user.id,
        message.from_user.username,
        get_text
    )

    if create_requests:
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!\n"
                             "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")
        await state.clear()


@router.callback_query(F.data == 'cancel_cooperation')
async def cancel_cooperation_request(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()