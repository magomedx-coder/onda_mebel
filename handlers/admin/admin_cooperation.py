from aiogram import Router, F
from aiogram.types import CallbackQuery

from database.crud import CrudCooperation
from keyboards.keyboard_creator import make_tasks_inline_keyboard, make_row_inline_keyboards
from keyboards.inline_keyboards import get_accept_cancel_buttons, admin_kb

router = Router()


@router.callback_query(F.data == 'cooperation_requests')
async def show_requests_cooperation(callback: CallbackQuery):
    await callback.answer()
    requests = await CrudCooperation().get_all_requests()

    if requests:
        await callback.message.edit_text(
            'üìã <b>–¢–µ–∫—É—â–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ:</b>',
            reply_markup=make_tasks_inline_keyboard(tasks=requests, callback_data_name="task")
        )
    else:
        await callback.message.edit_text("<b>‚ùå –ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ.</b>",
                                         reply_markup=make_row_inline_keyboards(admin_kb))


@router.callback_query(F.data.startswith("task_"))
async def handle_cooperation_request(callback: CallbackQuery):
    await callback.answer()
    request_id = callback.data.removeprefix("task_")

    task = await CrudCooperation().get_requests_by_id(request_id)

    response = (
        f"<b>–ó–∞—è–≤–∫–∞ #{task.id}</b>\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{task.username} (ID: {task.telegram_id})\n\n"
        f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{task.text_requests}\n\n"
        f"üïí –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {task.request_created_at.strftime('%Y-%m-%d %H:%M:%S')}"
    )

    await callback.message.edit_text(
        response,
        reply_markup=make_row_inline_keyboards(get_accept_cancel_buttons(int(request_id)))
    )


@router.callback_query(F.data.startswith("cancel_cooperation_requests_"))
async def cancel_cooperation_request(callback: CallbackQuery):
    request_id = int(callback.data.removeprefix("cancel_cooperation_requests_"))
    await callback.answer()

    crud = CrudCooperation()
    task = await crud.get_requests_by_id(request_id)

    await crud.cancel_request(request_id)
    await callback.message.edit_text(f"‚ùå –ó–∞—è–≤–∫–∞ #{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.",
                                     reply_markup=make_row_inline_keyboards(admin_kb))
    await callback.answer("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

    if task:
        await callback.bot.send_message(
            chat_id=task.telegram_id,
            text='–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!'
        )


@router.callback_query(F.data.startswith("accepted_cooperation_requests_"))
async def accept_cooperation_request(callback: CallbackQuery):
    request_id = int(callback.data.removeprefix("accepted_cooperation_requests_"))
    await callback.answer()

    crud = CrudCooperation()
    task = await crud.get_requests_by_id(request_id)

    if task:
        await crud.accept_request(request_id)
        requests_buttons = await crud.get_all_requests()
        response = (
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∞. –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –Ω–∞—á–∞—Ç–æ.\n\n"
            f"<b>–ó–∞—è–≤–∫–∞ #{request_id}</b>\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{task.username} (ID: {task.telegram_id})\n\n"
            f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{task.text_requests}\n\n"
            f"üïí –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {task.request_created_at.strftime('%Y-%m-%d %H:%M:%S')}"
        )

        await callback.bot.send_message(
            chat_id=task.telegram_id,
            text='–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –æ–¥–æ–±—Ä–µ–Ω. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.'
        )

        await callback.message.edit_text(
            response,
            reply_markup=make_tasks_inline_keyboard(tasks=requests_buttons, callback_data_name="task")
        )


@router.callback_query(F.data == 'show_requests_cooperation_2')
async def show_requests_cooperation_2(callback: CallbackQuery):
    await callback.answer()
    requests = await CrudCooperation().get_all_requests()

    if requests:
        await callback.message.edit_text(
            'üìã <b>–¢–µ–∫—É—â–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ:</b>',
            reply_markup=make_tasks_inline_keyboard(tasks=requests, callback_data_name="task")
        )
    else:
        await callback.message.edit_text("<b>‚ùå –ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ.</b>",
                                         reply_markup=make_row_inline_keyboards(admin_kb))