from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext

from database.crud import CategoryRepository, FurnitureRepository
from keyboards.inline_keyboards import country_kb, kitchen_subcategory_kb, more_added_furniture
from keyboards.keyboard_creator import make_row_keyboards, make_row_inline_keyboards
from states.states import NewFurnitureStates
import re

router = Router()


@router.callback_query(F.data == 'new_furniture')
async def new_furniture_function(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.answer()

    text = (
        "ü™Ñ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–µ–±–µ–ª–∏</b>\n\n"
        "üìù <b>–®–∞–≥ 1 –∏–∑ 5:</b> –û–ø–∏—Å–∞–Ω–∏–µ –º–µ–±–µ–ª–∏\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b> –º–µ–±–µ–ª–∏:\n"
        "‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –æ—Ç–¥–µ–ª–∫–∞\n"
        "‚Ä¢ –ì–∞–±–∞—Ä–∏—Ç—ã (–î√ó–®√ó–í)\n"
        "‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n"
        "‚Ä¢ –°—Ç–∏–ª—å –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä:</i>\n"
        "<code>–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –∫–æ–∂–∞–Ω—ã–π –¥–∏–≤–∞–Ω \"–ö–æ–º—Ñ–æ—Ä—Ç\" —Å –º—è–≥–∫–∏–º –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º, \n"
        "—Ä–∞–∑–º–µ—Ä—ã 200√ó90√ó85 —Å–º, –∫–∞—Ä–∫–∞—Å –∏–∑ –±–µ—Ä–µ–∑–æ–≤–æ–π —Ñ–∞–Ω–µ—Ä—ã, \n"
        "–ø–æ–¥—É—à–∫–∏ —Å–∏–¥–µ–Ω—å—è –Ω–∞ –ø—Ä—É–∂–∏–Ω–Ω–æ–º –±–ª–æ–∫–µ, —Ü–≤–µ—Ç —á–µ—Ä–Ω—ã–π.</code>"
    )

    await callback_query.message.answer(text)
    await state.set_state(NewFurnitureStates.description)


@router.message(NewFurnitureStates.description)
async def get_description_new_furniture(message: types.Message, state: FSMContext):
    description_furniture = (message.text or '').strip()
    if not description_furniture:
        await message.answer("‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>\n\n"
                             "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ–±–µ–ª–∏.")
        return

    await state.update_data(description_new_furniture=description_furniture)

    crud = CategoryRepository()
    get_categories = await crud.get_all_categories()
    categories = [category_name.name for category_name in get_categories]

    if not categories:
        await message.answer("üì≠ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                             "–í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–æ–≤ –º–µ–±–µ–ª–∏.\n"
                             "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        await state.clear()
        return

    text = (
        "‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ</b>\n\n"
        "üìã <b>–®–∞–≥ 2 –∏–∑ 5:</b> –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª\n\n"
        "–£–∫–∞–∂–∏—Ç–µ, –∫ –∫–∞–∫–æ–º—É <b>—Ä–∞–∑–¥–µ–ª—É</b> –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ üëá"
    )

    await message.answer(text, reply_markup=make_row_keyboards(categories))
    await state.set_state(NewFurnitureStates.category)


@router.message(NewFurnitureStates.category)
async def get_category(message: types.Message, state: FSMContext):
    category_name = (message.text or '').strip()

    if not category_name:
        await message.answer("‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞</b>\n\n"
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(category_name=category_name)

    if "–∫—É—Ö–æ–Ω–Ω–∞—è" in category_name.lower():
        text = (
            f"üóÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞:</b> {category_name}\n\n"
            f"üìã <b>–®–∞–≥ 3 –∏–∑ 5:</b> –¢–∏–ø –∫—É—Ö–Ω–∏\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ <b>—Ç–∏–ø –∫—É—Ö–Ω–∏</b> –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"
        )

        await message.answer(text, reply_markup=make_row_keyboards(kitchen_subcategory_kb))
        await state.set_state(NewFurnitureStates.kitchen_type)
    else:
        text = (
            f"üóÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞:</b> {category_name}\n\n"
            f"üìã <b>–®–∞–≥ 3 –∏–∑ 5:</b> –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞\n\n"
            f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ <b>—Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è</b> –º–µ–±–µ–ª–∏ üåç\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"
        )

        await message.answer(text, reply_markup=make_row_keyboards(country_kb))
        await state.set_state(NewFurnitureStates.country)


@router.message(NewFurnitureStates.kitchen_type)
async def get_kitchen_type(message: types.Message, state: FSMContext):
    kitchen_type = (message.text or '').strip()

    if not kitchen_type:
        await message.answer("‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞</b>\n\n"
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—É—Ö–Ω–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(kitchen_type=kitchen_type)
    await state.update_data(country_name="üá∑üá∫ –†–æ—Å—Å–∏—è")

    text = (
        f"üç≥ <b>–¢–∏–ø –∫—É—Ö–Ω–∏ –≤—ã–±—Ä–∞–Ω:</b> {kitchen_type}\n\n"
        f"üåç <b>–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:</b> üá∑üá∫ –†–æ—Å—Å–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n\n"
        f"üìã <b>–®–∞–≥ 4 –∏–∑ 5:</b> –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n\n"
        f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</b> –º–µ–±–µ–ª–∏ üì∏\n"
        f"‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–Ω–µ –±–æ–ª–µ–µ 10)\n"
        f"‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ —Å —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤\n"
        f"‚Ä¢ –ö–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ\n\n"
        f"–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ¬ª</b> –Ω–∏–∂–µ."
    )

    finish_button = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")]],
        resize_keyboard=True
    )

    await message.answer(text, reply_markup=finish_button)
    await state.set_state(NewFurnitureStates.photos)
    await state.update_data(photos=[])


@router.message(NewFurnitureStates.country)
async def get_country(message: types.Message, state: FSMContext):
    country_name = (message.text or '').strip()

    if not country_name:
        await message.answer("‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞</b>\n\n"
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(country_name=country_name)

    text = (
        f"üåç <b>–°—Ç—Ä–∞–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞:</b> {country_name}\n\n"
        f"üìã <b>–®–∞–≥ 4 –∏–∑ 5:</b> –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n\n"
        f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</b> –º–µ–±–µ–ª–∏ üì∏\n"
        f"‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–Ω–µ –±–æ–ª–µ–µ 10)\n"
        f"‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ —Å —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤\n"
        f"‚Ä¢ –ö–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ\n\n"
        f"–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ¬ª</b> –Ω–∏–∂–µ."
    )

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    finish_button = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")]],
        resize_keyboard=True
    )

    await message.answer(text, reply_markup=finish_button)
    await state.set_state(NewFurnitureStates.photos)
    await state.update_data(photos=[])


@router.message(NewFurnitureStates.photos)
async def get_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])

    if message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ":
        if not photos:
            await message.answer("‚ö†Ô∏è <b>–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</b>\n\n"
                                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –º–µ–±–µ–ª–∏.")
            return

        description = data.get("description_new_furniture", '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
        category_name = data.get("category_name", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        country_name = data.get("country_name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        kitchen_type = data.get("kitchen_type")

        if kitchen_type and "–∫—É—Ö–æ–Ω–Ω–∞—è" in category_name.lower():
            description = f"[{kitchen_type}] {description}"

        crud = FurnitureRepository()
        new_furniture = await crud.create_furniture(
            description=description,
            category=category_name,
            country=country_name
        )

        if not new_furniture:
            await message.answer("‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è</b>\n\n"
                                 "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ–±–µ–ª–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n"
                                 "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        photo_added = await crud.add_photos_to_furniture(new_furniture.id, photos)

        if not photo_added:
            await message.answer("‚ÑπÔ∏è –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω, –Ω–æ —Ñ–æ—Ç–æ –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã.\n"
                                 "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∑–∂–µ –≤ —Ä–∞–∑–¥–µ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        else:
            await message.answer("‚úÖ <b>–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</b>\n\n"
                                 "–í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

        text = (
            "üéâ <b>–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üìä <b>–î–µ—Ç–∞–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b>\n"
            f"‚Ä¢ –†–∞–∑–¥–µ–ª: {category_name}\n"
            f"‚Ä¢ –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞: {kitchen_type or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"‚Ä¢ –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è: {country_name}\n"
            f"‚Ä¢ –§–æ—Ç–æ: {len(photos)}\n\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description}\n\n"
            f"–°–ø–∞—Å–∏–±–æ! –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞. ‚úÖ"
        )

        await message.answer(text, reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    if message.photo:
        photo_file_id = message.photo[-1].file_id
        photos.append(photo_file_id)
        await state.update_data(photos=photos)

        await message.answer(f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ({len(photos)}/10)\n\n"
                             f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ¬ª.")

        if len(photos) >= 10:
            await message.answer("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (10).\n"
                                 "–ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ¬ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–±–µ–ª–∏.")
    else:
        await message.answer("‚ö†Ô∏è <b>–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ¬ª.")


@router.callback_query(F.data == 'remove_furniture')
async def remove_furniture_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.clear()

    
    categories_repo = CategoryRepository()
    all_categories = await categories_repo.get_all_categories()
    if not all_categories:
        await callback_query.message.answer("üì≠ –í –∫–∞—Ç–∞–ª–æ–≥–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤.")
        return

    items = [(cat.name, f"admin_delete_category_{cat.name}") for cat in all_categories]
    
    items.append(("‚¨ÖÔ∏è –í –º–µ–Ω—é", "admin_back_to_main"))

    text = (
        "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä:" 
    )

    await callback_query.message.answer(text, reply_markup=make_row_inline_keyboards(items))


@router.callback_query(F.data.startswith('admin_delete_category_'))
async def choose_category_for_delete_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()

    category_name = callback_query.data[len('admin_delete_category_'):]
    await state.update_data(delete_category_name=category_name)

    repo = FurnitureRepository()
    furniture_items = await repo.get_furniture_by_category(category_name)

    
    if not furniture_items:
        normalized_name = re.sub(r'^[^A-Za-z–ê-–Ø–∞-—è–Å—ë]+\s*', '', category_name)
        if normalized_name != category_name:
            furniture_items = await repo.get_furniture_by_category(normalized_name)

    if not furniture_items:
        await callback_query.message.answer(
            f"üì≠ –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category_name}</b> –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
        )
        return

    
    delete_buttons = [
        (f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å #{item.id}", f"admin_delete_furniture_{item.id}")
        for item in furniture_items
    ]
    
    delete_buttons.append(("‚óÄÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", "remove_furniture"))

    await callback_query.message.answer(
        (
            f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category_name}</b>: <b>{len(furniture_items)}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:"
        ),
        reply_markup=make_row_inline_keyboards(delete_buttons)
    )


@router.callback_query(F.data.startswith('admin_delete_furniture_'))
async def delete_furniture_item_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()

    item_id_str = callback_query.data[len('admin_delete_furniture_'):]
    try:
        item_id = int(item_id_str)
    except ValueError:
        await callback_query.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    repo = FurnitureRepository()
    deleted = await repo.delete_furniture(item_id)

    if deleted:
        await callback_query.message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä —Å ID <b>{item_id}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω."
        )
    else:
        await callback_query.message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä —Å ID <b>{item_id}</b>. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —É–¥–∞–ª–µ–Ω."
        )

    
    actions = [
        ("üîÑ –£–¥–∞–ª–∏—Ç—å –µ—â–µ", "remove_furniture"),
        ("‚¨ÖÔ∏è –í –º–µ–Ω—é", "admin_back_to_main")
    ]
    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=make_row_inline_keyboards(actions)
    )