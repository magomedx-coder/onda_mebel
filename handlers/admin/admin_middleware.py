from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext

from database.crud import CrudCategory
from keyboards.inline_keyboards import build_cancel_kb
from keyboards.keyboard_creator import make_row_inline_keyboards
from states.states import NewCategoryStates

router = Router()


@router.callback_query(F.data == 'new_category_furniture')
async def new_category_furniture_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.clear()

    prompt = (
        "üÜï <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n\n"
        "üîπ –ü–æ–¥—Å–∫–∞–∑–∫–∞: –¥–æ–±–∞–≤—å—Ç–µ —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ ‚Äî –º–µ–Ω—é —Å—Ç–∞–Ω–µ—Ç –Ω–∞–≥–ª—è–¥–Ω–µ–µ.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "<code>üõèÔ∏è –°–ø–∞–ª—å–Ω–∞—è –º–µ–±–µ–ª—å</code>\n"
        "<code>üç≥ –ö—É—Ö–æ–Ω–Ω–∞—è –º–µ–±–µ–ª—å</code>\n"
        "<code>üõãÔ∏è –ú—è–≥–∫–∞—è –º–µ–±–µ–ª—å</code>\n"
        "<code>üìö –°—Ç–æ–ª—ã –∏ —Å—Ç—É–ª—å—è</code>\n"
        "<code>üì∫ –¢—É–º–±—ã –∏ –∫–æ–º–æ–¥—ã</code>\n"
        "<code>üõèÔ∏è –ö—Ä–æ–≤–∞—Ç–∏</code>\n"
        "<code>üõèÔ∏èÔ∏è –ú–∞—Ç—Ä–∞—Å—ã</code>\n"
        "<code>üö™ –®–∫–∞—Ñ—ã</code>\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª."
    )

    await callback_query.message.answer(
        text=prompt,
        reply_markup=make_row_inline_keyboards(build_cancel_kb),
    )

    await state.set_state(NewCategoryStates.name_category)


@router.message(NewCategoryStates.name_category)
async def name_category_furniture(message: types.Message, state: FSMContext):
    name_category = (message.text or "").strip()

    if not name_category:
        await message.answer("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return

    crud = CrudCategory()
    exists = await crud.check_category_by_name(name_category)
    if exists:
        await message.answer("‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    await state.update_data(name_category=name_category)

    prompt = (
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: <b>{name_category}</b>\n\n"
        "–î–æ–±–∞–≤—å—Ç–µ <b>–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b> ‚Äî –æ–¥–Ω–∞-–¥–≤–µ —Ñ—Ä–∞–∑—ã.\n"
        "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –ø–æ–Ω—è—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª."
    )

    await message.answer(text=prompt, reply_markup=make_row_inline_keyboards(build_cancel_kb))
    await state.set_state(NewCategoryStates.description_category)


@router.message(NewCategoryStates.description_category)
async def description_category_furniture(message: types.Message, state: FSMContext):
    description_category = (message.text or "").strip()

    if not description_category:
        await message.answer("‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return

    await state.update_data(description_category=description_category)

    data = await state.get_data()
    name = data.get("name_category", "<–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è>")
    description = description_category

    preview = (
        "üéØ <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
        f"{name}\n"
        f"<i>{description}</i>\n\n"
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ. –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª,\n"
        "–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª, —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ."
    )

    keyboard_for_preview = build_cancel_kb + [("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", "save_category")]

    await message.answer(text=preview, reply_markup=make_row_inline_keyboards(keyboard_for_preview))


@router.callback_query(F.data == 'save_category')
async def save_category(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    data = await state.get_data()
    name_category = data.get("name_category")
    description_category = data.get("description_category")

    if not name_category or not description_category:
        await callback_query.message.answer("‚ùó –î–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ ‚Äî –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    crud = CrudCategory()
    add_category = await crud.create_category(name=name_category, description=description_category)

    if add_category:
        await callback_query.answer(text='üéâ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', show_alert=True)
        try:
            await callback_query.message.edit_text("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        except Exception:
            await callback_query.message.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    else:
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    await state.clear()


@router.callback_query(F.data == "cancel_category")
async def cancel_category_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚úñÔ∏è", show_alert=True)
    await state.clear()

    try:
        await callback_query.message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
    except Exception as e:
        try:
            await callback_query.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã: {e}")
        except Exception:
            pass