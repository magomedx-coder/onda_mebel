import logging

from aiogram import Router, types, filters, F
from aiogram.fsm.context import FSMContext
from sqlalchemy.exc import IntegrityError

from keyboards.inline_keyboards import start_kb
from keyboards.keyboard_creator import make_row_inline_keyboards

from database.crud import UserCrud

router = Router()


@router.message(filters.Command("start"))
@router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def start(message: types.Message, state: FSMContext):
    await state.clear()

    welcome_text = (
        "üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–µ–±–µ–ª—å–Ω—ã–π –±–æ—Ç!</b> üåü\n\n"
        "üõãÔ∏è –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Å—Ç–∏–ª—å–Ω—É—é –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –º–µ–±–µ–ª—å –¥–ª—è –ª—é–±–æ–≥–æ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞.\n\n"
        "üìÇ <b>–ù–∞—à –∫–∞—Ç–∞–ª–æ–≥ –≤–∫–ª—é—á–∞–µ—Ç:</b>\n"
        "‚Ä¢ –°–ø–∞–ª—å–Ω–∏ –∏ –º–∞—Ç—Ä–∞—Å—ã\n"
        "‚Ä¢ –ö—É—Ö–æ–Ω–Ω—ã–µ –≥–∞—Ä–Ω–∏—Ç—É—Ä—ã\n"
        "‚Ä¢ –ú—è–≥–∫—É—é –º–µ–±–µ–ª—å\n"
        "‚Ä¢ –°—Ç–æ–ª—ã –∏ —Å—Ç—É–ª—å—è\n"
        "‚Ä¢ –¢—É–º–±—ã –∏ –∫–æ–º–æ–¥—ã\n"
        "‚Ä¢ –®–∫–∞—Ñ—ã-–∫—É–ø–µ –∏ –≥–∞—Ä–¥–µ—Ä–æ–±–Ω—ã–µ\n\n"
        "üõí <b>–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:</b>\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ–±–µ–ª–∏\n"
        "2. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –º–æ–¥–µ–ª–∏\n"
        "3. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞\n\n"
        "üí¨ <i>–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</i>\n"
        "üîÑ <i>–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</i>\n\n"
        "üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:</b>"
    )

    keyboard = start_kb
    telegram_id = message.from_user.id
    crud = UserCrud()

    try:
        added_user = await crud.add_user(
            telegram_id=telegram_id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            is_admin=False,  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        )
        if added_user:
            logging.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", telegram_id)
        else:
            logging.info("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.", telegram_id)

    except IntegrityError as ie:
        logging.exception("‚ùå IntegrityError –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", telegram_id, ie)

    except Exception as e:
        logging.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", telegram_id, e)

    user = await crud.get_user_by_telegram_id(message.from_user.id)

    if user.is_admin:
        keyboard = start_kb + [("‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", 'settings_bot')]
        await message.answer(
            text=welcome_text,
            reply_markup=make_row_inline_keyboards(keyboard))

    else:
        await message.answer(
            text=welcome_text,
            reply_markup=make_row_inline_keyboards(keyboard))