import re

from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext


from database.crud import CrudFurniture
from keyboards.inline_keyboards import contry_of_origin_kb, kitchen_subcategory_inline_kb
from keyboards.keyboard_creator import make_row_inline_keyboards

router = Router()

FURNITURE_NAMES = {
    'sleep_furniture': 'üõèÔ∏è –°–ø–∞–ª—å–Ω–∞—è –º–µ–±–µ–ª—å',
    'kitchen_furniture': 'üç≥ –ö—É—Ö–æ–Ω–Ω–∞—è –º–µ–±–µ–ª—å',
    'soft_furniture': 'üõãÔ∏è –ú—è–≥–∫–∞—è –º–µ–±–µ–ª—å',
    'tables_chairs': 'üìö –°—Ç–æ–ª—ã –∏ —Å—Ç—É–ª—å—è',
    'cabinets_commodes': 'üì∫ –¢—É–º–±—ã –∏ –∫–æ–º–æ–¥—ã',
    'bed_furniture': 'üõèÔ∏è –ö—Ä–æ–≤–∞—Ç–∏',
    'mattresses': 'üõèÔ∏èÔ∏è –ú–∞—Ç—Ä–∞—Å—ã',
    'wardrobes': 'üö™ –®–∫–∞—Ñ—ã'
}

KITCHEN_SUBCATEGORIES = {
    'straight_kitchen': 'üìè –ü—Ä—è–º–∞—è –∫—É—Ö–Ω—è',
    'corner_kitchen': 'üìê –£–≥–ª–æ–≤–∞—è –∫—É—Ö–Ω—è'
}

ORIGIN_NAMES = {
    "russian_origin": "üá∑üá∫ –†–æ—Å—Å–∏—è",
    "turkey_origin": "üáπüá∑ –¢—É—Ä—Ü–∏—è"
}

TYPES_WITH_ORIGIN = {'sleep_furniture', 'soft_furniture', 'tables_chairs'}

TYPES_WITH_SUBCATEGORIES = {'kitchen_furniture'}

ITEMS_PER_PAGE = 10


def extract_kitchen_type(description: str) -> tuple:
    match = re.search(r'\[(.*?)\]', description)
    if match:
        kitchen_type = match.group(1)
        clean_description = re.sub(r'\[.*?\]\s*', '', description)
        return kitchen_type, clean_description
    return None, description


async def show_furniture_list(message: types.Message, category_name: str, country: str = "üá∑üá∫ –†–æ—Å—Å–∏—è", kitchen_type: str = None, page: int = 0):
    crud = CrudFurniture()

    if "–∫—É—Ö–æ–Ω–Ω–∞—è" in category_name.lower():
        country = "üá∑üá∫ –†–æ—Å—Å–∏—è"

    furniture_list = await crud.get_furniture_by_category_and_country(
        category_name=category_name,
        country=country
    )

    if kitchen_type and furniture_list:
        furniture_list = [
            furniture for furniture in furniture_list
            if f"[{kitchen_type}]" in furniture.description
        ]

    if not furniture_list:
        await message.answer("üì≠ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –º–µ–±–µ–ª–∏.\n\n"
                             "–ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! –ù–∞—à –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏.\n"
                             "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∏ —Å–º–æ—Ç—Ä–µ—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return

    total_items = len(furniture_list)
    start_index = page * ITEMS_PER_PAGE
    end_index = start_index + ITEMS_PER_PAGE
    paginated_furniture = furniture_list[start_index:end_index]

    for furniture in paginated_furniture:
        displayed_kitchen_type = ""
        if "–∫—É—Ö–æ–Ω–Ω–∞—è" in category_name.lower():
            kt, clean_description = extract_kitchen_type(furniture.description)
            if kt:
                displayed_kitchen_type = f"üç≥ <b>–¢–∏–ø –∫—É—Ö–Ω–∏:</b> {kt}\n"
        else:
            clean_description = furniture.description

        furniture_text = (
            f"ü™ë <b>{category_name}</b>\n"
            f"{'‚îÄ' * 30}\n"
            f"{clean_description}\n\n"
            f"{displayed_kitchen_type}"
            f"üåç <b>–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:</b> {furniture.country_origin}\n"
            f"üìÖ <b>–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b> {furniture.created_at.strftime('%d.%m.%Y') if furniture.created_at else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"{'‚îÄ' * 30}\n\n"
            f"üí¨ <b>–î–ª—è –∑–∞–∫–∞–∑–∞ —ç—Ç–æ–π –º–µ–±–µ–ª–∏:</b>\n"
            f"üì≤ WhatsApp: https://wa.me/+79280157223\n"
            f".telegram: https://t.me/magomedx\n\n"
            f"‚ú® <b>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—Å –≤ Instagram</b>\n"
            f"–∏ –±—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ –Ω–æ–≤–∏–Ω–æ–∫ –∏ –∞–∫—Ü–∏–π:\n"
            f"üì∏ https://instagram.com/xmagomed_x"
        )

        photos = await crud.get_furniture_photos(furniture.id)
        if photos:
            media_group = [types.InputMediaPhoto(media=photo.file_id) for photo in photos[:10]]
            try:
                await message.answer_media_group(media_group)
            except Exception:
                for photo in photos[:10]:
                    await message.answer_photo(photo.file_id)
        else:
            await message.answer("üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

        await message.answer(furniture_text, disable_web_page_preview=True)

    keyboard_buttons = [
        [types.KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]

    if end_index < total_items:
        keyboard_buttons.append([types.KeyboardButton(text="üîÑ –ï—â–µ")])

    reply_markup = types.ReplyKeyboardMarkup(
        keyboard=keyboard_buttons,
        resize_keyboard=True
    )

    if total_items > ITEMS_PER_PAGE:
        page_info = f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {((total_items - 1) // ITEMS_PER_PAGE) + 1}\n"
    else:
        page_info = ""

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–æ —Ç–æ–≤–∞—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã 10 –∏–∑ 14 –∏ —Ç–¥
    await message.answer(
        f"{page_info}"
        f"–ü–æ–∫–∞–∑–∞–Ω–æ <b>{len(paginated_furniture)}</b> –∏–∑ <b>{total_items}</b> —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        reply_markup=reply_markup
    )


@router.callback_query(F.data.in_(FURNITURE_NAMES.keys()))
async def furniture_callback(callback_query: types.CallbackQuery, state: FSMContext):
    furniture_type = callback_query.data
    await state.update_data(type_furniture=furniture_type)
    await state.update_data(current_page=0)  # –¢—É—Ç —Å–±—Ä–æ—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

    if furniture_type in TYPES_WITH_SUBCATEGORIES:
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—É—Ö–æ–Ω–Ω–æ–π –º–µ–±–µ–ª–∏:",
            reply_markup=make_row_inline_keyboards(kitchen_subcategory_inline_kb)
        )

    elif furniture_type in TYPES_WITH_ORIGIN:
        await callback_query.message.edit_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:",
            reply_markup=make_row_inline_keyboards(contry_of_origin_kb)
        )

    else:
        category_name = FURNITURE_NAMES.get(furniture_type, '–°–ø–∞–ª—å–Ω–∞—è –º–µ–±–µ–ª—å')
        await show_furniture_list(callback_query.message, category_name)

    await callback_query.answer()


@router.callback_query(F.data.in_(KITCHEN_SUBCATEGORIES.keys()))
async def kitchen_subcategory_callback(callback_query: types.CallbackQuery, state: FSMContext):
    kitchen_type_key = callback_query.data
    kitchen_type = KITCHEN_SUBCATEGORIES.get(kitchen_type_key, '–ö—É—Ö–Ω—è')

    await state.update_data(kitchen_subcategory=kitchen_type_key)
    await state.update_data(selected_kitchen_type=kitchen_type)
    await state.update_data(current_page=0)  # –¢—É—Ç —Å–±—Ä–æ—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

    await show_furniture_list(
        callback_query.message,
        "üç≥ –ö—É—Ö–æ–Ω–Ω–∞—è –º–µ–±–µ–ª—å",
        "üá∑üá∫ –†–æ—Å—Å–∏—è",
        kitchen_type
    )

    await callback_query.answer()


@router.callback_query(F.data.in_(ORIGIN_NAMES.keys()))
async def origin_callback(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    furniture_type = user_data.get('type_furniture', 'sleep_furniture')
    origin_type = callback_query.data

    await state.update_data(origin_type=origin_type)
    await state.update_data(current_page=0)  # –°–±—Ä–æ—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

    category_name = FURNITURE_NAMES.get(furniture_type, '–°–ø–∞–ª—å–Ω–∞—è –º–µ–±–µ–ª—å')
    origin_name = ORIGIN_NAMES.get(origin_type, 'üá∑üá∫ –†–æ—Å—Å–∏—è')
    kitchen_type = user_data.get('selected_kitchen_type')

    await show_furniture_list(callback_query.message, category_name, origin_name, kitchen_type)

    await callback_query.answer()


@router.message(F.text == "üîÑ –ï—â–µ")
async def more_furniture_handler(message: types.Message, state: FSMContext):
    user_data = await state.get_data()

    furniture_type = user_data.get('type_furniture', 'sleep_furniture')
    category_name = FURNITURE_NAMES.get(furniture_type, '–°–ø–∞–ª—å–Ω–∞—è –º–µ–±–µ–ª—å')
    origin_type = user_data.get('origin_type')
    origin_name = ORIGIN_NAMES.get(origin_type, 'üá∑üá∫ –†–æ—Å—Å–∏—è') if origin_type else "üá∑üá∫ –†–æ—Å—Å–∏—è"
    kitchen_type = user_data.get('selected_kitchen_type')
    current_page = user_data.get('current_page', 0)

    new_page = current_page + 1
    await state.update_data(current_page=new_page)

    await show_furniture_list(message, category_name, origin_name, kitchen_type, new_page)